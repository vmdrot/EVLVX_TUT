using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using Microsoft.Practices.Unity;
using BGU.DRPL.SignificantOwnership.Core.Questionnaires;
using BGU.DRPL.SignificantOwnership.Core.Spares.Data;
using BGU.DRPL.SignificantOwnership.Core.Spares.Dict;

namespace BGU.DRPL.SignificantOwnership.Core.TypeEditors
{
    public class Appx2OwnershipStructLP_Editor : GenericTypeEditor<Appx2OwnershipStructLP> { private IAppx2OwnershipStructLPEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IAppx2OwnershipStructLPEditFormFactory>(); return _fact; } } }
    public class RegLicAppx14NewSvc_Editor : GenericTypeEditor<RegLicAppx14NewSvc> { private IRegLicAppx14NewSvcEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IRegLicAppx14NewSvcEditFormFactory>(); return _fact; } } }
    public class RegLicAppx2LPQuest_Editor : GenericTypeEditor<RegLicAppx2LPQuest> { private IRegLicAppx2LPQuestEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IRegLicAppx2LPQuestEditFormFactory>(); return _fact; } } }
    public class RegLicAppx4PhysPQuest_Editor : GenericTypeEditor<RegLicAppx4PhysPQuest> { private IRegLicAppx4PhysPQuestEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IRegLicAppx4PhysPQuestEditFormFactory>(); return _fact; } } }
    public class RegLicAppx7ShareAcqIntent_Editor : GenericTypeEditor<RegLicAppx7ShareAcqIntent> { private IRegLicAppx7ShareAcqIntentEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IRegLicAppx7ShareAcqIntentEditFormFactory>(); return _fact; } } }
    public class AttachmentInfo_Editor : GenericTypeEditor<AttachmentInfo> { private IAttachmentInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IAttachmentInfoEditFormFactory>(); return _fact; } } }
    public class BankingLicensedActivityInfo_Editor : GenericTypeEditor<BankingLicensedActivityInfo> { private IBankingLicensedActivityInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IBankingLicensedActivityInfoEditFormFactory>(); return _fact; } } }
    public class BankingLicenseInfo_Editor : GenericTypeEditor<BankingLicenseInfo> { private IBankingLicenseInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IBankingLicenseInfoEditFormFactory>(); return _fact; } } }
    public class CommonOwnershipInfo_Editor : GenericTypeEditor<CommonOwnershipInfo> { private ICommonOwnershipInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ICommonOwnershipInfoEditFormFactory>(); return _fact; } } }
    public class ContactInfo_Editor : GenericTypeEditor<ContactInfo> { private IContactInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IContactInfoEditFormFactory>(); return _fact; } } }
    public class CouncilBodyInfo_Editor : GenericTypeEditor<CouncilBodyInfo> { private ICouncilBodyInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ICouncilBodyInfoEditFormFactory>(); return _fact; } } }
    public class CouncilMemberInfo_Editor : GenericTypeEditor<CouncilMemberInfo> { private ICouncilMemberInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ICouncilMemberInfoEditFormFactory>(); return _fact; } } }
    public class CurrencyAmount_Editor : GenericTypeEditor<CurrencyAmount> { private ICurrencyAmountEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ICurrencyAmountEditFormFactory>(); return _fact; } } }
    public class GenericPersonID_Editor : GenericTypeEditor<GenericPersonID> { private IGenericPersonIDEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IGenericPersonIDEditFormFactory>(); return _fact; } } }
    public class GenericPersonIDShare_Editor : GenericTypeEditor<GenericPersonIDShare> { private IGenericPersonIDShareEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IGenericPersonIDShareEditFormFactory>(); return _fact; } } }
    public class GenericPersonInfo_Editor : GenericTypeEditor<GenericPersonInfo> { private IGenericPersonInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IGenericPersonInfoEditFormFactory>(); return _fact; } } }
    public class LegalPersonShareInfo_Editor : GenericTypeEditor<LegalPersonShareInfo> { private ILegalPersonShareInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ILegalPersonShareInfoEditFormFactory>(); return _fact; } } }
    public class OwnershipStructure_Editor : GenericTypeEditor<OwnershipStructure> { private IOwnershipStructureEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IOwnershipStructureEditFormFactory>(); return _fact; } } }
    public class OwnershipSummaryInfo_Editor : GenericTypeEditor<OwnershipSummaryInfo> { private IOwnershipSummaryInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IOwnershipSummaryInfoEditFormFactory>(); return _fact; } } }
    public class OwnershipVotesInfo_Editor : GenericTypeEditor<OwnershipVotesInfo> { private IOwnershipVotesInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IOwnershipVotesInfoEditFormFactory>(); return _fact; } } }
    public class PersonsAssociation_Editor : GenericTypeEditor<PersonsAssociation> { private IPersonsAssociationEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IPersonsAssociationEditFormFactory>(); return _fact; } } }
    public class PhoneInfo_Editor : GenericTypeEditor<PhoneInfo> { private IPhoneInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IPhoneInfoEditFormFactory>(); return _fact; } } }
    public class PhysicalPersonShareInfo_Editor : GenericTypeEditor<PhysicalPersonShareInfo> { private IPhysicalPersonShareInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IPhysicalPersonShareInfoEditFormFactory>(); return _fact; } } }
    public class PurchasedVoteInfo_Editor : GenericTypeEditor<PurchasedVoteInfo> { private IPurchasedVoteInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IPurchasedVoteInfoEditFormFactory>(); return _fact; } } }
    public class SignatoryInfo_Editor : GenericTypeEditor<SignatoryInfo> { private ISignatoryInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ISignatoryInfoEditFormFactory>(); return _fact; } } }
    public class TotalOwnershipDetailsInfo_Editor : GenericTypeEditor<TotalOwnershipDetailsInfo> { private ITotalOwnershipDetailsInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ITotalOwnershipDetailsInfoEditFormFactory>(); return _fact; } } }
    public class BankInfo_Editor : GenericTypeEditor<BankInfo> { private IBankInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IBankInfoEditFormFactory>(); return _fact; } } }
    public class CountryInfo_Editor : GenericTypeEditor<CountryInfo> { private ICountryInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ICountryInfoEditFormFactory>(); return _fact; } } }
    public class LegalPersonInfo_Editor : GenericTypeEditor<LegalPersonInfo> { private ILegalPersonInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ILegalPersonInfoEditFormFactory>(); return _fact; } } }
    public class LocationInfo_Editor : GenericTypeEditor<LocationInfo> { private ILocationInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<ILocationInfoEditFormFactory>(); return _fact; } } }
    public class PhysicalPersonInfo_Editor : GenericTypeEditor<PhysicalPersonInfo> { private IPhysicalPersonInfoEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IPhysicalPersonInfoEditFormFactory>(); return _fact; } } }
    public class RegistrarAuthority_Editor : GenericTypeEditor<RegistrarAuthority> { private IRegistrarAuthorityEditFormFactory _fact; protected override ITypeEditorFormFactoryBase TypeEditorFormFactory { get { if (_fact == null) _fact = TypeEditorsDispatcher.Container.Resolve<IRegistrarAuthorityEditFormFactory>(); return _fact; } } }
}
